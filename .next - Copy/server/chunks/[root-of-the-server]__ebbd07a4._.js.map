{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Jayesh/OneDrive/Desktop/BizNest/cafe-management-system/models/User.ts"],"sourcesContent":["import mongoose, { Schema, Document, models } from \"mongoose\";\r\n\r\nexport interface IUser extends Document {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  role: \"customer\" | \"staff\" | \"admin\";\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>(\r\n  {\r\n    name: { type: String, required: true },\r\n    email: { type: String, required: true, unique: true },\r\n    password: { type: String, required: true },\r\n    role: {\r\n      type: String,\r\n      enum: [\"customer\", \"staff\", \"admin\"],\r\n      default: \"customer\",\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nconst User = models.User || mongoose.model<IUser>(\"User\", UserSchema);\r\nexport default User;\r\n"],"names":[],"mappings":";;;;AAAA;;AASA,MAAM,aAAa,IAAI,mHAAM,CAC3B;IACE,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAY;YAAS;SAAQ;QACpC,SAAS;IACX;AACF,GACA;IAAE,YAAY;AAAK;AAGrB,MAAM,OAAO,mHAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAC3C","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Jayesh/OneDrive/Desktop/BizNest/cafe-management-system/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"❌ Please define MONGODB_URI in .env.local\");\r\n}\r\n\r\nlet isConnected = false;\r\n\r\nexport async function dbConnect() {\r\n  if (isConnected) return;\r\n\r\n  try {\r\n    await mongoose.connect(MONGODB_URI);\r\n    isConnected = true;\r\n    console.log(\"✅ MongoDB connected\");\r\n  } catch (error) {\r\n    console.error(\"❌ MongoDB connection failed:\", error);\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,cAAc;AAEX,eAAe;IACpB,IAAI,aAAa;IAEjB,IAAI;QACF,MAAM,oHAAQ,CAAC,OAAO,CAAC;QACvB,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Jayesh/OneDrive/Desktop/BizNest/cafe-management-system/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\r\nimport NextAuth, { Session } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport bcrypt from \"bcrypt\";\r\nimport User from \"@/models/User\";\r\nimport { dbConnect } from \"@/lib/db\";\r\n\r\n// Extend the Session type to include 'role'\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: {\r\n      name?: string | null;\r\n      email?: string | null;\r\n      image?: string | null;\r\n      role?: string | null;\r\n    };\r\n  }\r\n}\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        await dbConnect();\r\n\r\n        const user = await User.findOne({ email: credentials?.email });\r\n        if (!user) throw new Error(\"No user found with this email\");\r\n\r\n        const isPasswordValid = await bcrypt.compare(\r\n          credentials!.password,\r\n          user.password\r\n        );\r\n        if (!isPasswordValid) throw new Error(\"Invalid password\");\r\n\r\n        return {\r\n          id: user._id.toString(),\r\n          name: user.name,\r\n          email: user.email,\r\n          role: user.role,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.role = (user as any).role;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token && session.user) {\r\n        (session.user as any).role = token.role;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  session: { strategy: \"jwt\" },\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;AAcA,MAAM,UAAU,IAAA,kLAAQ,EAAC;IACvB,WAAW;QACT,IAAA,qMAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,IAAA,wJAAS;gBAEf,MAAM,OAAO,MAAM,2JAAI,CAAC,OAAO,CAAC;oBAAE,OAAO,aAAa;gBAAM;gBAC5D,IAAI,CAAC,MAAM,MAAM,IAAI,MAAM;gBAE3B,MAAM,kBAAkB,MAAM,gHAAM,CAAC,OAAO,CAC1C,YAAa,QAAQ,EACrB,KAAK,QAAQ;gBAEf,IAAI,CAAC,iBAAiB,MAAM,IAAI,MAAM;gBAEtC,OAAO;oBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;oBACrB,MAAM,KAAK,IAAI;oBACf,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,AAAC,KAAa,IAAI;YACjC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACxB,QAAQ,IAAI,CAAS,IAAI,GAAG,MAAM,IAAI;YACzC;YACA,OAAO;QACT;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QAAE,UAAU;IAAM;AAC7B","debugId":null}}]
}